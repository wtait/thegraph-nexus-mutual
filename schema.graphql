type User @entity {
  id: ID! # address
  isMember: Boolean!
  coverCount: Int!
  stakeCount: Int!
  covers: [Cover!]! @derivedFrom(field: "user")
  stakes: [Stake!]! @derivedFrom(field: "user")
  claims: [Claim!]! @derivedFrom(field: "user")
  votes: [Vote!]! @derivedFrom(field: "user")
}

type InsuredContract @entity {
  id: ID!
  ens: String
  covers: [Cover!]! @derivedFrom(field: "contract")
  stakes: [Stake!]! @derivedFrom(field: "contract")
}

type Cover @entity {
  id: ID!
  user: User!
  contract: InsuredContract!
  amount: BigInt!
  daysToCover: BigInt!
  created: BigInt!
  expires: BigInt!
  premium: BigInt!
  premiumNXM: BigInt!
  claims: [Claim!]! @derivedFrom(field: "cover")
}

type Stake @entity {
  id: ID!
  user: User!
  contract: InsuredContract!
  amount: BigDecimal!
  unlockedAmount: BigInt!
  burntAmount: BigInt!
  daysToStake: Int!
  created: BigInt!
  expires: BigInt!
}

type NexusContracts @entity {
  id: ID!
  contractRegister: Bytes! # address
  memberRoles: Bytes! # address
  tokenData: Bytes! # address
  claimsData: Bytes! # address
  quotationData: Bytes! # address
  tokenController: Bytes! # address
}

type Claim @entity {
  id: ID!
  user: User!
  cover: Cover!
  submitDate: BigInt!
  votes: [Vote!]! @derivedFrom(field: "claim")
}

type Vote @entity {
  id: ID!
  user: User!
  claim: Claim!
  verdict: Int!
  submitDate: BigInt!
}

# type NXMToken @entity {
#   id: ID!
#   totalSupply: BigInt!
#   price: BigInt!
#   marketCap: BigInt!
#   users: [User]
# }
